#'     toc: yes
#'     toc_depth: 3
#' geometry: margin=1in
#' ---
#+ setup, include=FALSE
knitr::opts_chunk(
echo = TRUE,
cache = FALSE,
comment = NA,
message = FALSE,
warning = FALSE,
tidy = FALSE,
cache.lazy = FALSE,
#--- figure ---#
dpi=400,
fig.width=7.5,
fig.height=5,
out.width="750px",
out.height="500px"
)
opts_knit(
root.dir = ""
)
#/*=================================================*/
#' # Preparation
#/*=================================================*/
#--- pacakges ---#
library(sf)
library(sp)
library(GWmodel)
library(here)
library(data.table)
library(ggplot2)
library(viridis)
library(dplyr)
library(stringr)
#--- wd ---#
setwd(here())
#/*=================================================*/
#' # Data
#/*=================================================*/
### Load data
data <- st_read("Bohnhoff_Schormann_2019 Processed Data.gpkg") %>%
mutate(seed = tgts/1000*2) %>%
cbind(., st_coordinates(st_centroid(.))) %>%
mutate(log_seed  = log(seed))
data_sp <- as(data, 'Spatial')
#/*=================================================*/
#' # Analysis
#/*=================================================*/
#/*----------------------------------*/
#' ## GWR
#/*----------------------------------*/
gwr <- gwr.basic(yield ~ log_seed,
data = data_sp,
bw = 100,
kernel = "bisquare",
adaptive = T,
F123.test = F
)
data <- mutate(data, beta = gwr$SDF$log_seed)
#/*----------------------------------*/
#' ## Optimization
#/*----------------------------------*/
# estimated optimal seeding rate
pSoy = 9             # (dollar/bushel)
pSeed = 0.35          # (dollar/1,000)
data <- data %>%
mutate(opt_seed = pSoy/pSeed * beta) %>%
mutate(opt_seed = ifelse(opt_seed < 60, 60, opt_seed)) %>%
mutate(opt_seed = ifelse(opt_seed > 140, 140, opt_seed))
pi_data <- copy(data) %>%
data.table() %>%
.[,pi_opt := pSoy * beta * log(opt_seed) - pSeed * opt_seed] %>%
.[,pi_f := pSoy * beta * log(120) - pSeed * 120]
# lm(beta ~ ec + elevation + slope + tpi, data = data) %>%  summary
# soil_type <- data.table(data)[, .(id, ss_173446, ss_173452, ss_173466, ss_173430, ss_173445)] %>%
#   melt(id.var = "id") %>%
#   .[value == 1,] %>%
#   setnames("variable", "soil_type") %>%
#   .[, value := NULL]
# data <- left_join(data, soil_type, by = "id")
#/*=================================================*/
#' # Maps
#/*=================================================*/
map_theme <- theme(
legend.position='bottom',
legend.key.width = unit(1.5, "cm"),
legend.text = element_text(size=12,family='Times'),
legend.title = element_text(size=12,family='Times'),
axis.text.y= element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
#--- panel ---#
panel.border = element_blank(),
panel.grid.major = element_line(color='transparent'),
panel.grid.minor = element_line(color='transparent'),
panel.background = element_blank(),
# panel.background = element_rect(fill = "transparent"),
#--- plot ---#
plot.margin = margin(0, 0, 0, 0, "cm"),
plot.background = element_rect(fill = "transparent",color='transparent')
)
#/*----------------------------------*/
#' ## Seed trial design
#/*----------------------------------*/
g_seed <- ggplot(data) +
geom_sf(aes(fill = seed)) +
scale_fill_viridis(
name = 'Target Seed Rate (1000/acre)'
) +
map_theme
ggsave(g_seed, file = "Figures/seed_design.pdf", height = 4, width = 7)
#/*----------------------------------*/
#' ## Yield
#/*----------------------------------*/
g_yield <- ggplot(data) +
geom_sf(aes(fill = yield)) +
scale_fill_viridis(
name = 'Soybean Yield (bu/acre)'
) +
map_theme
ggsave(g_yield, file = "Figures/yield.pdf", height = 4, width = 7)
#/*----------------------------------*/
#' ## Yield vs seed
#/*----------------------------------*/
ggplot(data) +
geom_point(aes(y = yield, x = seed), size = 0.4) +
geom_smooth(aes(y = yield, x = seed), method = "lm")
#/*----------------------------------*/
#' ## Yield response to seed
#/*----------------------------------*/
g_response <- ggplot(data) +
geom_sf(aes(fill = beta/80)) +
scale_fill_viridis(
name = 'Yield Response to Seed (bu/acre per 1000 seeds)'
) +
map_theme
ggsave(g_response, file = "Figures/response.pdf", height = 4, width = 7)
#/*=================================================*/
#' # What explains yield reponse?
#/*=================================================*/
#/*----------------------------------*/
#' ## soil type
#/*----------------------------------*/
ssurgo_data <- st_read("SSURGO.gpkg") %>%
mutate(muname = str_split(muname, ",") %>%  sapply("[", 1)) %>%
st_transform(32616)
g_soil <- ggplot(ssurgo_data) +
geom_sf(aes(fill = muname)) +
scale_fill_viridis_d(
name = 'Soil Type'
) +
map_theme +
guides(fill = guide_legend(title.position="top", ncol = 2))
ggsave(g_soil, file = "Figures/soil.pdf", height = 4, width = 7)
#/*----------------------------------*/
#' ## elevation
#/*----------------------------------*/
g_elev <- ggplot(data) +
geom_sf(aes(fill = elevation)) +
scale_fill_viridis_c(
name = 'Elevation'
) +
map_theme
ggsave(g_elev, file = "Figures/elev.pdf", height = 4, width = 7)
#/*----------------------------------*/
#' ## Best seed
#/*----------------------------------*/
g_opt <- ggplot(data) +
geom_sf(aes(fill = opt_seed)) +
scale_fill_viridis(
name = 'Economically Optimal Seed Rate (1000 seeds/acre)'
) +
map_theme
ggsave(g_opt, file = "Figures/opt.pdf", height = 4, width = 7)
data <- data %>%
mutate(opt_seed = pSoy/pSeed * beta) %>%
mutate(opt_seed = ifelse(opt_seed < 60, 60, opt_seed)) %>%
mutate(opt_seed = ifelse(opt_seed > 10, 140, opt_seed))
data
Soybean Trial Paper 2020/Non-Nebraska soybean data/Bohnhoff_Schormann_2019 Processed Data.gpkg") %>%
mutate(seed = tgts/1000*2) %>%
cbind(., st_coordinates(st_centroid(.))) %>%
mutate(log_seed  = log(seed))
data_sp <- as(data, 'Spatial')
data <- st_read("/Users/tmieno2/Box/Mieno_Li_Edge_Bullock Nebraska Soybean Trial Paper 2020/Non-Nebraska soybean data/Bohnhoff_Schormann_2019 Processed Data.gpkg") %>%
mutate(seed = tgts/1000*2) %>%
cbind(., st_coordinates(st_centroid(.))) %>%
mutate(log_seed  = log(seed))
data_sp <- as(data, 'Spatial')
data
data_sp <- as(data, 'Spatial')
gwr <- gwr.basic(yield ~ log_seed,
data = data_sp,
bw = 100,
kernel = "bisquare",
adaptive = T,
F123.test = F
)
data <- mutate(data, beta = gwr$SDF$log_seed)
#
data
pSoy = 9             # (dollar/bushel)
pSeed = 0.35          # (dollar/1,000)
data
data$beta %>%  hist
pSoy = 9             # (dollar/bushel)
pSeed = 0.35          # (dollar/1,000)
data <- data %>%
mutate(opt_seed = pSoy/pSeed * beta)
data$opt_seed %>% hist
data <- data %>%
mutate(opt_seed = pSoy/pSeed * beta) %>%
mutate(opt_seed = ifelse(opt_seed < 60, 60, opt_seed))
data$opt_seed %>% hist
setwd("~/Box/Teaching/UNL/AppliedEconometrics_MS/LectureNotes")
library(rmarkdown)
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/Testing/testing_x.Rmd")
setwd("~/Box/Teaching/UNL/AppliedEconometrics_MS/LectureNotes")
library(rmarkdown)
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/Testing/testing_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/Testing/testing_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/Testing/testing_x.Rmd")
setwd("~/Box/Teaching/UNL/AppliedEconometrics_MS/LectureNotes")
library(rmarkdown)
library(rmarkdown)
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/Testing/testing_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
gpa <- read.dta13("/GPA3.dta") %>%
filter(!is.na(ctothrs)) %>%
#--- create a interaction term ---#
mutate(
female_sat:=female*sat,
female_hsperc:=female*hsperc,
female_tothrs:=female*tothrs
)
#--- regression with female dummy ---#
reg_full <- lm(cumgpa~female+sat+female_sat+
hsperc+female_hsperc+tothrs+female_tothrs,
data=gpa)
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
gpa <- read.dta13("GPA3.dta") %>%
filter(!is.na(ctothrs)) %>%
#--- create a interaction term ---#
mutate(
female_sat:=female*sat,
female_hsperc:=female*hsperc,
female_tothrs:=female*tothrs
)
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
gpa <- read.dta13("GPA3.dta")
setwd("/Users/tmieno2/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/")
gpa <- read.dta13("GPA3.dta")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
gpa <- read.dta13("GPA3.dta") %>%
filter(!is.na(ctothrs)) %>%
#--- create interaction terms ---#
mutate(
female_sat:=female*sat,
female_hsperc:=female*hsperc,
female_tothrs:=female*tothrs
)
#--- regression with female dummy ---#
reg_full <- lm(cumgpa~female
+sat+female_sat
+hsperc+female_hsperc
+tothrs+female_tothrs,
data=gpa
)
reg_full
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
modelsummary(reg_full, gof_omit = "Obs|R|Log")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
linearHypothesis(reg_full,
c(
"female = 0",
"female_hsperc = 0",
"female_sat = 0",
"female_tothrs"
)
)
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/EconometricModel/modeling_x.Rmd")
render("~/Dropbox/TeachingUNL/AppliedEconometrics_MS/LectureNotes/StandardErrorEstimation/se_estimation_x.Rmd")
square_it <- function(a) {
#--- 1. do something on x ---#
squared_a <- a^2
#--- 2. return the results ---#
return(squared_a)
}
square_it(3)
square_it("fine")
square_and_sqrt_it <- function(a) {
#--- 1. do something on x ---#
squared_a <- a^2
original_a <- sqrt(squared_a)
#--- 2. return the results ---#
return(original_a)
}
square_and_sqrt_it(3)
square_multiply_it <- function(a) {
#--- 1. do something on a ---#
squared_a <- a^2
z <- multiplier * squared_a
#--- 2. return the results ---#
return(z)
}
square_multiply_it <- function(a) {
#--- 1. do something on a ---#
squared_a <- a^2
z <- multiplier * squared_a
#--- 2. return the results ---#
return(z)
}
square_multiply_it(10)
multiplier <- 10
square_multiply_it(10)
square_it <- function(a = 5) {
#--- 1. do something on a ---#
squared_a <- a^2
#--- 2. return the results ---#
return(squared_a)
}
square_it()
square_them_add <- function(a = 5, b = 2) {
#--- 1. do something on a ---#
squared_and_summed <- a^2 + b^2
#--- 2. return the results ---#
return(squared_and_summed)
}
#--- run it ---#
square_them_add(4, 3)
temp_from_F_to_C <- function(temp_F){
temp_C <- (temp_F-32) * 5/9
return(temp_C)
}
temp_from_F_to_C(105)
(temp_F-32) * 5/9
temp_F <- 100
(temp_F-32) * 5/9
temp_from_F_to_C <- function(temp_F){
(temp_F-32) * 5/9
}
temp_from_F_to_C(105)
temp_from_F_to_C <- function(temp_F){
return((temp_F-32) * 5/9)
}
temp_from_F_to_C(105)
for (x in 1:5){
print(x^2)
}
for (x in 1:1000){
print(x^2)
}
for (x in seq(5,50,by=5)){
print(x^3)
}
lapply(1:5, function(x){x^2})
class(lapply(1:5, function(x){x^2}))
lapply(1:5, function(x){x^2}) %>% unlist()
mtcars %>% head()
lapply(1:5, square)
square(5)
square_it <- function(x){
return(x^2)
}
lapply(1:5, function(x) square_it(x))
lapply(1:5, square_it)
lapply(seq(5,50,by=5), function(x){
x^3
})
lapply(seq(5,50,by=5), function(x){x^3})
corn_revenue <- function(n_rate, corn_price) {
corn_yield <- 120 + 25*log(n_rate)
revenue <- corn_price*corn_yield
return(revenue)
}
lapply(
seq(2.5, 4, by = 0.1),
function(c_price, n_rate) corn_revenue(c_price, n_rate = 200
)
)
lapply(
seq(2.5, 4, by = 0.1),
function(eiruhfgirthgjkbjkb) corn_revenue(eiruhfgirthgjkbjkb, n_rate = 200)
)
lapply(
seq(2.5, 4, by = 0.1),
function(x) corn_revenue(x, n_rate = 200)
)
#--- corn price vector ---#
corn_price_vec <- seq(3, 5, by = 1)
#--- nitrogen vector ---#
nitrogen_vec <- seq(0, 300, by = 100)
corn_price_vec
nitrogen_vec
expand.grid(corn_price = corn_price_vec, nitrogen = nitrogen_vec)
(
parameters_data <- expand.grid(corn_price = corn_price_vec, nitrogen = nitrogen_vec) %>%
#--- convert the matrix to a data.frame ---#
data.frame()
)
parameters_data
i = 1
corn_price <- parameters_data[i,'corn_price']
corn_price
nitrogen <- parameters_data[i,'nitrogen']
nitrogen
corn_price <- parameters_data[i,'corn_price']
#--- define nitrogen  ---#
nitrogen <- parameters_data[i,'nitrogen']
#--- calculate yield ---#
yield <- 240 * (1 - exp(0.4 - 0.02 * nitrogen))
#--- calculate revenue ---#
revenue <- corn_price * yield
#--- combine all the information you would like to have  ---#
data_to_return <- data.frame(
corn_price = corn_price,
nitrogen = nitrogen,
revenue = revenue
)
data_to_return
parameters_data
gen_rev_corn <- function(i) {
#--- define corn price ---#
corn_price <- parameters_data[i,'corn_price']
#--- define nitrogen  ---#
nitrogen <- parameters_data[i,'nitrogen']
#--- calculate yield ---#
yield <- 240 * (1 - exp(0.4 - 0.02 * nitrogen))
#--- calculate revenue ---#
revenue <- corn_price * yield
#--- combine all the information you would like to have  ---#
data_to_return <- data.frame(
corn_price = corn_price,
nitrogen = nitrogen,
revenue = revenue
)
return(data_to_return)
}
#--- loop over all the parameter combinations ---#
rev_data <- lapply(1:nrow(parameters_data), gen_rev_corn)
#--- take a look ---#
rev_data %>% head()
#--- take a look ---#
rev_data
bind_rows(rev_data)
unlist(rev_data)
bind_rows(rev_data)
set.seed(927834)
N <- 1000 # number of observations
B <- 1000 # number of simulations
b_hat_store <- rep(0, B) # beta hat storage
t_stat_store <- rep(0, B) # t-stat storage
c_value <- qt(0.975, N - 2) # critical value
x <- runif(N,0,1)
i =1
het_u <- 3 * rnorm(N, mean = 0, sd = 2 * x) # heteroskedastic error
y <- 1 + het_u # y
data_temp <- data.frame(y = y,x = x)
#--- regression ---#
ols_res <- lm(y~x,data=data_temp)
b_hat <- ols_res$coef['x'] # coef estimate on x
b_hat_store[i] <- b_hat # save the coef estimate
vcov_ols <- vcov(ols_res) # get variance covariance matrix
t_stat_store[i] <- b_hat/sqrt(vcov_ols['x','x']) # calculate t-stat
t_stat_store
i =2
i =2
het_u <- 3 * rnorm(N, mean = 0, sd = 2 * x) # heteroskedastic error
y <- 1 + het_u # y
data_temp <- data.frame(y = y,x = x)
#--- regression ---#
ols_res <- lm(y~x,data=data_temp)
b_hat <- ols_res$coef['x'] # coef estimate on x
b_hat_store[i] <- b_hat # save the coef estimate
vcov_ols <- vcov(ols_res) # get variance covariance matrix
t_stat_store[i] <- b_hat/sqrt(vcov_ols['x','x']) # calculate t-stat
t_stat_store
suppressMessages(library(future.apply))
